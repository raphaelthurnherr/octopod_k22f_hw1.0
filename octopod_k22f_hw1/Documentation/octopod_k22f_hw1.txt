=============================================================================
List of generated methods in project: octopod_k22f_hw1

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method sets registers according routing settings. Call this method in user code to route 
                desired pins into peripherals. The method is useful for reinitialization HW after some routing changes.
   - pin_mux_configure_ftm_pins -FTM method sets registers according routing settings. Call this method code to route desired 
                pins into FTM0, FTM1, FTM2, FTM3 peripherals.
   - pin_mux_configure_gpio_pins -GPIO method sets registers according routing settings. Call this method code to route desired 
                pins into PTA, PTB, PTC, PTD, PTE peripherals.
   - pin_mux_configure_i2c_pins -I2C method sets registers according routing settings. Call this method code to route desired 
                pins into I2C0, I2C1 peripherals.
   - pin_mux_configure_i2s_pins -I2S method sets registers according routing settings. Call this method code to route desired 
                pins into I2S0 peripheral.
   - pin_mux_configure_jtag_pins -JTAG method sets registers according routing settings. Call this method code to route desired 
                pins into JTAG peripheral.
   - pin_mux_configure_llwu_pins -LLWU method sets registers according routing settings. Call this method code to route desired 
                pins into LLWU peripheral.
   - pin_mux_configure_osc_pins -OSC method sets registers according routing settings. Call this method code to route desired 
                pins into OSC peripheral.
   - pin_mux_configure_rtc_pins -RTC method sets registers according routing settings. Call this method code to route desired 
                pins into RTC peripheral.
   - pin_mux_configure_spi_pins -SPI method sets registers according routing settings. Call this method code to route desired 
                pins into SPI0, SPI1 peripherals.
   - pin_mux_configure_uart_pins -UART method sets registers according routing settings. Call this method code to route desired 
                pins into UART0, UART1, UART2 peripherals.

Module "Int1accel" (component ExtInt)
   - Int1accel_GetVal -Returns the actual value of the input pin of the component.

Module "I2C1"      (component GenericSWI2C)
   - I2C1_Init -Initializes the associated peripheral(s) and the components internal variables. The method is called 
                automatically as a part of the application initialization code.
   - I2C1_ResetBus -Reset bus if needed.
   - I2C1_SendChar -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and 
                then writes one character (byte) to the bus. The slave address must be specified before by the "SelectSlave" 
                method or in the  component initialization section of 'Slave address init' property. When working as the SLAVE, 
                this method writes one character (byte) to the bus. If the ERR_NOTAVAIL error code returned, the char is 
                successfully sent to master but the master device responds by an acknowledgment instead of no acknowledgment at 
                the end of transfer. 'OnError' event is called in this case.
   - I2C1_RecvChar -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 1 to the I2C bus and 
                then reads one character (byte) from the bus. The slave address must be specified before by the "SelectSlave" 
                method or in the component initialization section of 'Slave address init' property. When working as a SLAVE, 
                this method reads one character (byte) from the bus.
   - I2C1_SendBlock -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and 
                then writes the block of characters to the bus. If the component is disabled (by the "Disable" method or 
                initialization), the block is moved to the output buffer if the 'Output buffer size' property is different from 
                zero. The content of the output buffer is sent immediately with the stop condition at the end when the 
                component is enabled by the "Enable" method. After the output buffer transmission, the whole output buffer is 
                cleared. The slave address must be specified before by the "SelectSlave" method or in component initialization 
                section of 'Slave address init' property.  When working as a SLAVE, this method writes block of characters to 
                the bus. If the ERR_NOTAVAIL error code is returned, the whole block is successfully sent to a master but the 
                master device responds by an acknowledgment instead of no acknowledgment sent at the end of the last block byte 
                transfer. 'OnError' event is called in this case.
   - I2C1_SendBlockContinue -Same is SendBlock() but does not send start condition. When working as a MASTER, this method 
                writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and then writes the block of characters to the 
                bus. If the component is disabled (by the "Disable" method or initialization), the block is moved to the output 
                buffer if the 'Output buffer size' property is different from zero. The content of the output buffer is sent 
                immediately with the stop condition at the end when the component is enabled by the "Enable" method. After the 
                output buffer transmission, the whole output buffer is cleared. The slave address must be specified before by 
                the "SelectSlave" method or in component initialization section of 'Slave address init' property.  When working 
                as a SLAVE, this method writes block of characters to the bus. If the ERR_NOTAVAIL error code is returned, the 
                whole block is successfully sent to a master but the master device responds by an acknowledgment instead of no 
                acknowledgment sent at the end of the last block byte transfer. 'OnError' event is called in this case.
   - I2C1_RecvBlock -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 1 to the I2C bus and 
                then reads the block of characters from the bus. The slave address must be specified before by the 
                "SelectSlave" method or in component initialization section of 'Slave address init' property.  When working as 
                a SLAVE, this method reads the block of characters from the bus.
   - I2C1_SendStop -When working as a MASTER, if the 'Automatic stop condition' property value is 'no', this method sends a 
                valid stop  condition to the serial data line of the I2C bus to terminate the communication on the bus after 
                using send methods. This method is enabled only if the component is in MASTER mode and 'Automatic stop 
                condition' property value is 'no'
   - I2C1_SelectSlave -When working as a MASTER, this method selects a new slave for communication by its slave address value. 
                Any send or receive method are directed to or from the selected device, until a new slave device is selected by 
                this method. If the selected slave uses 10-bit slave addressing, as the parameter 7 bits must be passed, which 
                involves 10-bit addressing (11110XX), including two MSBs of slave address (XX). The second byte of the 10-bit 
                slave address must be sent to the slave as a general character of send methods. This method is available only 
                if the component is in MASTER mode.
   - I2C1_GetSelected -When working as a MASTER, this method returns the identification address value of the slave, which is 
                currently selected for communication with the master. If the current slave uses 10-bit slave addressing, the 
                method returns the first 7 bits only, which involves 10-bit addressing (11110XX), including two MSBs of the 
                slave address (XX). This method is not able to return the rest value of 10-bit slave address. This method is 
                available only if the component is in MASTER mode.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Init -Initializes the driver.

Module "FX1"       (component FXOS8700CQ)
   - FX1_Enable -Enables the device with setting the ACTIVE bit in the CTRL register 1
   - FX1_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - FX1_isEnabled -Returns the status of the the ACTIVE bit in the CTRL register 1
   - FX1_SwReset -Perform a software reset using the rst bit in the CTRL register 2
   - FX1_ReadReg8 -Reads an 8bit device register
   - FX1_WriteReg8 -Write an 8bit device register
   - FX1_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetRaw8XYZ -Returns in an array the x, y and z accelerometer as 8bit values.
   - FX1_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the X sensor 
                has 1 g.
   - FX1_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the Y sensor 
                has 1 g.
   - FX1_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the Z sensor 
                has 1 g.
   - FX1_GetXmg -Returns the X value in mg
   - FX1_GetYmg -Returns the Y value in mg
   - FX1_GetZmg -Returns the Z value in mg
   - FX1_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - FX1_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - FX1_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - FX1_GetXOffset -Returns the offset applied to the X value.
   - FX1_GetYOffset -Returns the offset applied to the Y value.
   - FX1_GetZOffset -Returns the offset applied to the Z value.
   - FX1_GetX1gValue -Returns the value for 1g for channel  X.
   - FX1_GetY1gValue -Returns the value for 1g for channel  Y.
   - FX1_GetZ1gValue -Returns the value for 1g for channel  Z.
   - FX1_SetFastMode -Turns the F_READ (Fast Read Mode) on or off
   - FX1_WhoAmI -Returns the value of the WHO_AM_I (0x0D) register
   - FX1_GetTemperature -Returns the temperature of the die as signed 8bit values in degree Celsius
   - FX1_GetMagX -Returns the X magnetometer value.
   - FX1_GetMagY -Returns the Y magnetometer value.
   - FX1_GetMagZ -Returns the Z magnetometer value.
   - FX1_MagneticSensorReset -Initiates a magnetic sensor reset cycle that will restore correct operation after exposure to an 
                excessive magnetic field which exceeds the Full Scale Range but is less than the Maximum Applied Magnetic Field.
   - FX1_Init -Initializes the device driver
   - FX1_Deinit -Counterpart to Init() method.

Module "TI1"       (component TimerInt)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.

Module "I2C2"      (component GenericSWI2C)
   - I2C2_Init -Initializes the associated peripheral(s) and the components internal variables. The method is called 
                automatically as a part of the application initialization code.
   - I2C2_ResetBus -Reset bus if needed.
   - I2C2_SendChar -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and 
                then writes one character (byte) to the bus. The slave address must be specified before by the "SelectSlave" 
                method or in the  component initialization section of 'Slave address init' property. When working as the SLAVE, 
                this method writes one character (byte) to the bus. If the ERR_NOTAVAIL error code returned, the char is 
                successfully sent to master but the master device responds by an acknowledgment instead of no acknowledgment at 
                the end of transfer. 'OnError' event is called in this case.
   - I2C2_RecvChar -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 1 to the I2C bus and 
                then reads one character (byte) from the bus. The slave address must be specified before by the "SelectSlave" 
                method or in the component initialization section of 'Slave address init' property. When working as a SLAVE, 
                this method reads one character (byte) from the bus.
   - I2C2_SendBlock -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and 
                then writes the block of characters to the bus. If the component is disabled (by the "Disable" method or 
                initialization), the block is moved to the output buffer if the 'Output buffer size' property is different from 
                zero. The content of the output buffer is sent immediately with the stop condition at the end when the 
                component is enabled by the "Enable" method. After the output buffer transmission, the whole output buffer is 
                cleared. The slave address must be specified before by the "SelectSlave" method or in component initialization 
                section of 'Slave address init' property.  When working as a SLAVE, this method writes block of characters to 
                the bus. If the ERR_NOTAVAIL error code is returned, the whole block is successfully sent to a master but the 
                master device responds by an acknowledgment instead of no acknowledgment sent at the end of the last block byte 
                transfer. 'OnError' event is called in this case.
   - I2C2_SendBlockContinue -Same is SendBlock() but does not send start condition. When working as a MASTER, this method 
                writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and then writes the block of characters to the 
                bus. If the component is disabled (by the "Disable" method or initialization), the block is moved to the output 
                buffer if the 'Output buffer size' property is different from zero. The content of the output buffer is sent 
                immediately with the stop condition at the end when the component is enabled by the "Enable" method. After the 
                output buffer transmission, the whole output buffer is cleared. The slave address must be specified before by 
                the "SelectSlave" method or in component initialization section of 'Slave address init' property.  When working 
                as a SLAVE, this method writes block of characters to the bus. If the ERR_NOTAVAIL error code is returned, the 
                whole block is successfully sent to a master but the master device responds by an acknowledgment instead of no 
                acknowledgment sent at the end of the last block byte transfer. 'OnError' event is called in this case.
   - I2C2_RecvBlock -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 1 to the I2C bus and 
                then reads the block of characters from the bus. The slave address must be specified before by the 
                "SelectSlave" method or in component initialization section of 'Slave address init' property.  When working as 
                a SLAVE, this method reads the block of characters from the bus.
   - I2C2_SendStop -When working as a MASTER, if the 'Automatic stop condition' property value is 'no', this method sends a 
                valid stop  condition to the serial data line of the I2C bus to terminate the communication on the bus after 
                using send methods. This method is enabled only if the component is in MASTER mode and 'Automatic stop 
                condition' property value is 'no'
   - I2C2_SelectSlave -When working as a MASTER, this method selects a new slave for communication by its slave address value. 
                Any send or receive method are directed to or from the selected device, until a new slave device is selected by 
                this method. If the selected slave uses 10-bit slave addressing, as the parameter 7 bits must be passed, which 
                involves 10-bit addressing (11110XX), including two MSBs of slave address (XX). The second byte of the 10-bit 
                slave address must be sent to the slave as a general character of send methods. This method is available only 
                if the component is in MASTER mode.
   - I2C2_GetSelected -When working as a MASTER, this method returns the identification address value of the slave, which is 
                currently selected for communication with the master. If the current slave uses 10-bit slave addressing, the 
                method returns the first 7 bits only, which involves 10-bit addressing (11110XX), including two MSBs of the 
                slave address (XX). This method is not able to return the rest value of 10-bit slave address. This method is 
                available only if the component is in MASTER mode.

Module "SW_I2C_PWM" (component GenericI2C)
   - SW_I2C_PWM_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - SW_I2C_PWM_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - SW_I2C_PWM_RequestBus -Starts a critical section for accessing the bus.
   - SW_I2C_PWM_ReleaseBus -Finishes a critical section for accessing the bus.
   - SW_I2C_PWM_ReadBlock -Read from the device a block.
   - SW_I2C_PWM_WriteBlock -Write a block to the device.
   - SW_I2C_PWM_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - SW_I2C_PWM_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - SW_I2C_PWM_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr)
                , (Sr+i2cAddr+1), (data)...(data+P)
   - SW_I2C_PWM_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - SW_I2C_PWM_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - SW_I2C_PWM_GetSemaphore -Returns the currently allocated semaphore.
   - SW_I2C_PWM_Deinit -Deinitializes the driver.
   - SW_I2C_PWM_ScanDevice -Checks if a device responds on the bus with an ACK.
   - SW_I2C_PWM_Init -Initializes the driver.

Module "PWM_CTRL_OE" (component BitIO)
   - PWM_CTRL_OE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - PWM_CTRL_OE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - PWM_CTRL_OE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - PWM_CTRL_OE_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "UsonicTrig" (component BitIO)
   - UsonicTrig_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - UsonicTrig_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - UsonicTrig_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - UsonicTrig_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "IR0_detect" (component ExtInt)
   - IR0_detect_GetVal -Returns the actual value of the input pin of the component.

Module "IR1_detect" (component ExtInt)
   - IR1_detect_GetVal -Returns the actual value of the input pin of the component.

Module "IR2_detect" (component ExtInt)
   - IR2_detect_GetVal -Returns the actual value of the input pin of the component.

Module "UsonicPWM" (component ExtInt)
   - UsonicPWM_GetVal -Returns the actual value of the input pin of the component.

Module "UART0"     (component AsynchroSerial)
   - UART0_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - UART0_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - UART0_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - UART0_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - UART0_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - UART0_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - UART0_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - UART0_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "TI2"       (component TimerInt)

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU2_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU2_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.

Module "TI3"       (component TimerInt)

Module "TU3"       (component TimerUnit_LDD)
   - TU3_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU3_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU3_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU3_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.

Module "Led_red"   (component BitIO)
   - Led_red_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led_red_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led_red_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - Led_red_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Led_blue"  (component BitIO)
   - Led_blue_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led_blue_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led_blue_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - Led_blue_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Led_green" (component BitIO)
   - Led_green_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - Led_green_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led_green_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led_green_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - Led_green_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MK22FN512LH12)
   - Cpu_SetClockConfiguration -Calling of this method will cause the clock configuration change and reconfiguration of all 
                components according to the requested clock configuration setting.
   - Cpu_GetClockConfiguration -Returns the active clock configuration identifier. The method is automatically enabled if more 
                than one clock configuration is enabled in the component.

===================================================================================
